package routines;

import java.text.Normalizer;  
import java.text.Normalizer.Form;  
import java.util.Locale;  
import java.util.regex.Pattern;

import org.apache.commons.lang3.StringEscapeUtils;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class DONLUtils {

	private static final Pattern NONLATIN = Pattern.compile("[^\\w-]");  
	private static final Pattern WHITESPACE = Pattern.compile("[\\s]");  
	
	/**
     * return Replace leading and trailing backslash-quote combination which appears in DONL1 extras fields.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} DONLUtils
     * 
     * {param} string("") input: The input string.
     */
    public static String sanitizeDONL1Extras(String input) {
    	if (input == null)
    		return null;
    	
        input = input.replaceFirst("^\\\"", "");
        input = input.replaceFirst("\\\"$", "");
        return input;
    }
    
	/**
     * return Generates a slug from the input string
     * 
     * {talendTypes} String
     * 
     * {Category} DONLUtils
     * 
     * {param} string("") input: The input string.
     */
    public static String generateSlug(String input) {
    	if (input == null)
    		return null;
    	
    	String nowhitespace = WHITESPACE.matcher(input).replaceAll("-");  
        String normalized = Normalizer.normalize(nowhitespace, Form.NFD);  
        String slug = NONLATIN.matcher(normalized).replaceAll("");  
        return slug.toLowerCase(Locale.ENGLISH);  
    }

	/**
     * return Generates CBS resources from id, name and last modified
     * 
     * {talendTypes} String
     * 
     * {Category} DONLUtils
     * 
     * {param} string("") input: The input string.
     */
    public static String generateCBSResources(String id, String name, String lastModified, Integer recordCount, Integer columnCount, String domain) {
    	if (id == null)
    		return null;
    	
    	StringBuffer json = new StringBuffer();
    	json.append("[");
    	
		json.append("{");
		json.append("\"format\":\"" + StringEscapeUtils.escapeJson("application/atom+xml") + "\",");
		json.append("\"last_modified\":\"" + StringEscapeUtils.escapeJson(lastModified != null ? lastModified : "") + "\",");
		json.append("\"url\":\"" + StringEscapeUtils.escapeJson("http://" + domain + "/ODataFeed/OData/" + id) + "\",");
		json.append("\"bytesize\":\"" + StringEscapeUtils.escapeJson(recordCount + " rijen, " + columnCount + " kolommen") + "\",");
		json.append("\"name\":\"" + StringEscapeUtils.escapeJson(name != null ? name : "") + "\"");
		json.append("},");

		json.append("{");
		json.append("\"format\":\"" + StringEscapeUtils.escapeJson("application/json") + "\",");
		json.append("\"last_modified\":\"" + StringEscapeUtils.escapeJson(lastModified != null ? lastModified : "") + "\",");
		json.append("\"url\":\"" + StringEscapeUtils.escapeJson("http://" + domain + "/ODataApi/OData/" + id) + "\",");
		json.append("\"bytesize\":\"" + StringEscapeUtils.escapeJson(recordCount + " rijen, " + columnCount + " kolommen") + "\",");
		json.append("\"name\":\"" + StringEscapeUtils.escapeJson(name != null ? name : "") + "\"");
		json.append("}");

    	json.append("]");
    	
        return json.toString();  
    }
}
